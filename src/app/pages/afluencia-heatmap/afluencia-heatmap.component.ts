import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { TablerIconsModule } from 'angular-tabler-icons';
import { NgApexchartsModule } from 'ng-apexcharts';
import { MaterialModule } from 'src/app/material.module';
import { ApiService } from 'src/app/services/api.service';
import html2canvas from 'html2canvas';
import { DomSanitizer } from '@angular/platform-browser';

interface RegistroAfluencia {
  dia_semana: string;
  hora: number;
  conteo: number;
  nombre_estacionamiento: string;
}

@Component({
  standalone: true,
  imports: [CommonModule ,MaterialModule, NgApexchartsModule, TablerIconsModule,],
  selector: 'app-afluencia-heatmap',
  templateUrl: './afluencia-heatmap.component.html',
})
export class AfluenciaHeatmapComponent implements OnInit {
  dias: string[] = [];
  horas: string[] = [];
  matrix: number[][] = [];

  parqueaderosDisponibles: { parkingId: string, nombre: string }[] = [];
  parqueaderoSeleccionado: string = 'Todos';
  originalData: any[] = [];
  chartLabels: string[] = [];
  chartData: number[] = [];
  chartPrediccionLabels: string[] = [];
  chartPrediccionData: number[] = [];
  diasPred: string[] = [];
  horasPred: string[] = [];
  matrixPred: number[][] = [];
  errorMAE: number | null = null;
  errorMAPE: number | null = null;
  errorN: number | null = null;
  interpretacionIA: string | null = null;

  @ViewChild('tablaAfluencia') tablaAfluencia!: ElementRef;


  constructor(private api: ApiService,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit(): void {
    this.api.obtenerParqueaderos().subscribe(parqueaderos => {
      this.parqueaderosDisponibles = parqueaderos;
      this.parqueaderosDisponibles.unshift({ parkingId: '', nombre: 'Todos' }); // Agrega opci√≥n 'Todos' al inicio
          console.log('üîµ Cargando datos de afluencia...', this.parqueaderosDisponibles);
    });

  this.api.obtenerAfluencia().subscribe((res: RegistroAfluencia[]) => {
      console.log("üîµ Datos crudos:", res);
      this.originalData = res;

      /*this.api.interpretarAfluencia(this.originalData).subscribe(resp => {
                console.log("üß† Interpretaci√≥n IA:", resp);

        this.interpretacionIA = resp.interpretacion;
        console.log("üß† Interpretaci√≥n IA:", this.interpretacionIA);
      });*/

      const parqueaderos = Array.from(
        new Set(res.map((r: any) => r.estacionamiento))
      ).sort();
      this.parqueaderosDisponibles = ['Todos', ...parqueaderos];

      this.actualizarTabla(res);
      const ranking = this.obtenerRankingParqueaderos();
      this.chartLabels = ranking.map(r => r[0]);
      this.chartData = ranking.map(r => r[1]);

      this.cargarPrediccionProphet(); // predicci√≥n global o por parqueadero default

    });
  }

  actualizarTabla(datos: any[]) {
    const diasUnicos = [...new Set(datos.map(r => r.dia_semana))];
    const horasUnicas = [...new Set(datos.map(r => r.hora))].sort((a, b) => a - b);

    const matriz: number[][] = diasUnicos.map(() => Array(horasUnicas.length).fill(0));

    datos.forEach(r => {
      const fila = diasUnicos.indexOf(r.dia_semana);
      const col = horasUnicas.indexOf(r.hora);
      if (fila >= 0 && col >= 0) {
        matriz[fila][col] += r.conteo; 
      }
    });

    this.dias = diasUnicos;
    this.horas = horasUnicas.map(h => `${String(h).padStart(2, '0')}:00`);
    this.matrix = matriz;
  }

  filtrarPorParqueadero() {
    const filtrados = this.parqueaderoSeleccionado === 'Todos'
      ? this.originalData
      : this.originalData.filter(d => d.estacionamiento === this.parqueaderoSeleccionado);
    
      console.log('üîµ Datos filtrados por parqueadero:', this.parqueaderoSeleccionado, filtrados);
    this.actualizarTabla(filtrados);
  // Buscar el ID correspondiente al nombre
  const parqueadero = this.parqueaderosDisponibles.find(p => p.nombre === this.parqueaderoSeleccionado);
  console.log("asdad",parqueadero)
  const id = parqueadero ? parqueadero.parkingId : ''; // si no lo encuentra, manda global
  console.log('üîµ Cargando predicci√≥n Prophet para parqueadero:', id);
  this.cargarPrediccionProphet(id);
  }


  color(valor: number): string {
    if (valor === 0) return '#f5f5f5';
    if (valor < 5) return '#fde0dc';
    if (valor < 10) return '#ffab91';
    return '#ff7043';
  }

  obtenerRankingParqueaderos() {
    const resumen = new Map<string, number>();

    for (const registro of this.originalData) {
      const nombre = registro.estacionamiento;
      resumen.set(nombre, (resumen.get(nombre) || 0) + registro.conteo);
    }

    // Convertir a array y ordenar descendente
    const resultadoOrdenado = Array.from(resumen.entries())
      .sort((a, b) => b[1] - a[1]);

    return resultadoOrdenado;
  }

  cargarPrediccionProphet(parqueaderoId: string = '') {
  console.log('üîµ Cargando predicci√≥n Prophet para parqueadero:', parqueaderoId);
  this.api.obtenerPrediccionProphet(parqueaderoId).subscribe(res => {
    console.log('üìà Predicci√≥n Prophet:', res);

    if (!res || !Array.isArray(res.prediccion)) {
      console.warn('‚ö†Ô∏è No se pudo obtener predicci√≥n v√°lida:', res);
      this.matrixPred = [];
      this.diasPred = [];
      this.horasPred = [];
      this.errorMAE = null;
      this.errorMAPE = null;
      this.errorN = null;
      return;
    }

    const prediccion = res.prediccion;
    const transformado = this.transformarPrediccionAHeatmap(prediccion);
    this.actualizarTablaPrediccion(prediccion);

    // Actualiza errores
    this.errorMAE = res.error.mae;
    this.errorMAPE = res.error.mape;
    this.errorN = res.error.n;
  });
}



  transformarPrediccionAHeatmap(prediccion: any[]): RegistroAfluencia[] {
    return prediccion.map(p => {
      const fecha = new Date(p.ds);
      const hora = fecha.getHours();
      const opciones: Intl.DateTimeFormatOptions = { weekday: 'long' };
      const dia_semana = fecha.toLocaleDateString('en-US', opciones); // Ej: "Monday"
      return {
        dia_semana,
        hora,
        conteo: Math.round(p.yhat), // Redondeas la predicci√≥n
        nombre_estacionamiento: this.parqueaderoSeleccionado
      };
    });
  }

  actualizarTablaPrediccion(prediccion: any[]) {
    const diasMap = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];

    // Extraer d√≠a y hora
    const datos = prediccion.map(p => {
      const fecha = new Date(p.ds);
      return {
        dia: diasMap[fecha.getDay()],
        hora: fecha.getHours(),
        conteo: p.yhat
      };
    });

    const diasUnicos = [...new Set(datos.map(r => r.dia))];
    const horasUnicas = [...new Set(datos.map(r => r.hora))].sort((a, b) => a - b);
    const matriz: number[][] = diasUnicos.map(() => Array(horasUnicas.length).fill(0));

    datos.forEach(r => {
      const fila = diasUnicos.indexOf(r.dia);
      const col = horasUnicas.indexOf(r.hora);
      if (fila >= 0 && col >= 0) {
        matriz[fila][col] += r.conteo;
      }
    });

    this.diasPred = diasUnicos;
    this.horasPred = horasUnicas.map(h => `${String(h).padStart(2, '0')}:00`);
    this.matrixPred = matriz;
  }

  colorPred(valor: number): string {
    if (valor === 0) return '#f5f5f5';
    if (valor < 5) return '#e8f5e9';
    if (valor < 10) return '#a5d6a7';
    return '#66bb6a';
  }

  capturarTablaComoImagen() {
    const tabla = this.tablaAfluencia.nativeElement;

    html2canvas(tabla).then(canvas => {
      const base64image = canvas.toDataURL('image/png');

      const prompt = 'Analiza esta tabla de afluencia horaria por d√≠a en un parqueadero. La tabla representa la cantidad de personas que usan el parqueadero en cada hora de cada d√≠a de la semana. Quiero que identifiques: '+
      '1. Los patrones de uso m√°s importantes (horas y d√≠as m√°s concurridos y m√°s vac√≠os).'+
      '2. Horarios donde podr√≠a ser rentable aplicar promociones u ofertas para atraer m√°s clientes.'+
      '3. Recomendaciones pr√°cticas para mejorar la gesti√≥n operativa (turnos, mantenimiento, seguridad).'+
      '4. Ideas para fidelizar a los clientes o aumentar la recurrencia, bas√°ndote en los patrones de comportamiento.'+
      'Devuelve el an√°lisis en formato claro, breve y orientado a decisiones del negocio. √ösalo como si fuera un resumen ejecutivo para un gerente.;'

      this.api.analizarImagen(base64image, prompt).subscribe(resp => {
        console.log("üß† Respuesta IA:", resp);
        this.interpretacionIA = this.convertirMarkdownBasico(resp.respuesta);
      }, error => {
        console.error("‚ö†Ô∏è Error al analizar imagen:", error);
      });
    });
  }

  convertirMarkdownBasico(text: string): string {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<b>$1</b>')       // negritas
      .replace(/(?:\r\n|\r|\n)/g, '<br>')           // saltos de l√≠nea
      .replace(/- (.*?)(?=<br>)/g, '‚Ä¢ $1');          // vi√±etas
  }


}
